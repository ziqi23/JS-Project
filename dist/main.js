/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("const Data = __webpack_require__(/*! ./scripts/data.js */ \"./src/scripts/data.js\");\nconst CreateGraph = __webpack_require__(/*! ./scripts/createGraph.js */ \"./src/scripts/createGraph.js\");\n\n//Object oriented programming - constructor for each HTML element\n\nconst el = document.getElementById(\"svg-graph\");\nconst el2 = document.getElementById(\"eci-graph\");\nlet cpiData;\n// let salaryData;\nlet eciData;\nasync function fetchData() {\n  cpiData = await fetch(\"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_USA?start_date=2015-02-28&end_date=2023-02-28&api_key=z4ZhwWk_L5Tp-MszdTFD\").then(async function (response) {\n    // console.log(response)\n    cpiData = await response.json();\n    createGraph2(cpiData.dataset.data.reverse());\n\n    // data.dataset.data.forEach((date) => {\n    //     let newEle = document.createElement(\"div\");\n    //     newEle.innerHTML = date;\n    //     el.appendChild(newEle);\n    // })\n    // console.log(newEle);\n  });\n\n  return cpiData;\n}\n\n// salaryData = fetch(\"https://api.stlouisfed.org/fred/series/observations?series_id=CEU0500000003&api_key=50c37cf826ff0bb2e15e19cb6d19483f&file_type=json\", {headers: {'Access-Control-Allow-Origin': '*'}})\n//         .then(async function(res) {\n//             console.log(res);\n//             salaryData = res.json();\n//             console.log(salaryData);\n//         })\n\n// fetch(\"https://api.bls.gov/publicAPI/v2/timeseries/data/CMU2010000000000D?registrationkey=7f547dfafd2b470cbd505daa838b9304&catalog=true&startyear=2015&endyear=2022\")\n//     .then(async function(response) {\n//         // console.log(response);\n//         eciData = await response.json();\n//         // console.log(eciData.Results.series[0].data);\n//         createEciGraph(eciData.Results.series[0].data.reverse());\n//     })\n\nasync function createEciGraph(startYear, endYear) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"general\";\n  let d = new Data();\n  let g = new CreateGraph();\n  let dataset;\n  if (type === \"general\") {\n    dataset = await d.fetchRegularEciData(startYear, endYear);\n  } else {\n    dataset = await d.fetchEciDataByIndustry(type, startYear, endYear);\n  }\n  g.createEciGraph(dataset, startYear, endYear);\n}\ncreateEciGraph(2012, 2022, \"professionalServices\");\nfunction _createEciGraph(dataset, startYear, endYear) {\n  console.log(dataset);\n  // Currently assumes data in [[key, value], ...] format\n\n  let margin = {\n    left: 50,\n    bottom: 50,\n    top: 50,\n    right: 50\n  }; // Define margins\n  let svgWidth = 1000,\n    svgHeight = 500; // Define container size\n  let width = svgWidth - margin.left - margin.right; // Define inner container size\n  let height = svgHeight - margin.bottom - margin.right; // Define inner container size\n  let eachWidth = width / dataset.length; // Define space between each data point\n\n  let svg = d3.select(\"#eci-graph\") // Set HTML element to container size\n  .attr(\"width\", svgWidth).attr(\"height\", svgHeight);\n  let xScale = d3.scaleTime() // Define x axis scaling to fill container area\n  .domain([new Date(`${startYear}-03-31`), new Date(`${endYear}-12-31`)]).range([0, width]);\n  // .domain([0, 95])\n  // .range([0, width])\n\n  let yScale = d3.scaleLinear() // Define y axis scaling to fill container area\n  .domain([0, 2]).range([height, 0]);\n  let xAxis = d3.axisBottom() // Create x axis and define number of ticks\n  .scale(xScale).ticks(8);\n  let yAxis = d3.axisLeft() // Create y axis and define number of ticks\n  .scale(yScale);\n  let cpiChart = svg.selectAll(\"circle\") // Plot data points\n  .data(dataset) // Import dataset\n  .enter() // For each data element\n  .append(\"circle\") // Append to the SVG a circle element\n  .attr(\"transform\", `translate(${margin.left}, ${margin.bottom})`) // Account for padding\n  .attr(\"cx\", (data, index) => eachWidth * index) // x coordinate\n  .attr(\"cy\", data => yScale(data.value)) // y coordinate\n  .attr(\"r\", 1) // radius\n  .attr(\"stroke\", \"black\");\n  svg.append(\"g\") // Append y Axis\n  .attr(\"transform\", `translate(${margin.left}, ${margin.bottom})`).call(yAxis);\n  svg.append(\"g\") // Append x Axis\n  .attr(\"transform\", `translate(${margin.left}, ${svgHeight - margin.bottom})`).call(xAxis);\n}\n\n// function createGraph2(dataset) {\n//     // Currently assumes data in [[key, value], ...] format\n\n//     let margin = {left: 50, bottom: 50, top: 50, right: 50} // Define margins\n//     let svgWidth = 1000, svgHeight = 500 // Define container size\n//     let width = svgWidth - margin.left - margin.right; // Define inner container size\n//     let height = svgHeight - margin.bottom - margin.right; // Define inner container size\n//     let eachWidth = (width / dataset.length) // Define space between each data point\n\n//     let svg = d3.select(\"#svg-graph\") // Set HTML element to container size\n//         .attr(\"width\", svgWidth)\n//         .attr(\"height\", svgHeight)\n\n//     let xScale = d3.scaleTime() // Define x axis scaling to fill container area\n//         .domain([new Date(\"2015-02-28\"), new Date(\"2023-02-28\")])\n//         .range([0, width])\n//         // .domain([0, 95])\n//         // .range([0, width])\n\n//     let yScale = d3.scaleLinear() // Define y axis scaling to fill container area\n//         .domain([200, 400])\n//         .range([height, 0])\n\n//     let xAxis = d3.axisBottom() // Create x axis and define number of ticks\n//         .scale(xScale)\n//         .ticks(8)\n\n//     let yAxis = d3.axisLeft() // Create y axis and define number of ticks\n//         .scale(yScale)\n\n//     let cpiChart = svg.selectAll(\"circle\") // Plot data points\n//         .data(dataset) // Import dataset\n//         .enter() // For each data element\n//         .append(\"circle\") // Append to the SVG a circle element\n//         .attr(\"transform\", `translate(${margin.left}, ${margin.bottom})`) // Account for padding\n//         .attr(\"cx\", (data, index) => eachWidth * index) // x coordinate\n//         .attr(\"cy\", data => yScale(data[1])) // y coordinate\n//         .attr(\"r\", 1) // radius\n//         .attr(\"stroke\", \"black\");\n\n//     svg.append(\"g\") // Append y Axis\n//         .attr(\"transform\", `translate(${margin.left}, ${margin.bottom})`)\n//         .call(yAxis);\n\n//     svg.append(\"g\") // Append x Axis\n//         .attr(\"transform\", `translate(${margin.left}, ${svgHeight - margin.bottom})`)\n//         .call(xAxis);\n// }\n\nfetchData();\nlet toggleButton = document.getElementById(\"toggle-graph\");\ntoggleButton.addEventListener('click', handleClick);\nfunction handleClick(e) {\n  e.preventDefault();\n  // console.log(el.style.display)\n  if (el.getAttribute(\"visibility\") !== \"visible\") {\n    el.setAttribute(\"visibility\", \"visible\");\n  } else {\n    el.setAttribute(\"visibility\", \"hidden\");\n  }\n}\n\n// console.log(dataset);\n// createGraph(dataset)\n\n// function createGraph(dataset) {\n//     // Currently assumes data in [[key, value], ...] format\n//     let margin = {left: 50, bottom: 50}\n//     let svgWidth = 1000, svgHeight = 500\n//     let width = svgWidth - margin.left;\n//     let height = svgHeight - margin.bottom;\n//     let barWidth = (svgWidth / dataset.length) // May need to update\n\n//     let svg = d3.select(\"#svg-graph\")\n//         .attr(\"width\", svgWidth)\n//         .attr(\"height\", svgHeight)\n\n//     let xScale = d3.scaleTime()\n//         .domain([new Date(\"2015-02-28\"), new Date(\"2023-02-28\")])\n//         .range([0, width])\n//         // .domain([0, 95])\n//         // .range([0, width])\n\n//     let yScale = d3.scaleLinear()\n//         .domain([200, 400])\n//         .range([height, 0])\n\n//     let xAxis = d3.axisBottom()\n//         .scale(xScale)\n//         .ticks(8)\n\n//     let yAxis = d3.axisLeft()\n//         .scale(yScale)\n\n//     let chart = svg.selectAll(\"circle\")\n//         .data(dataset)\n//         .enter()\n//         .append(\"circle\")\n//         .attr(\"cx\", (data, index) => margin.left + barWidth * index)\n//         .attr(\"cy\", data => yScale(data[1]))\n//         .attr(\"data-y\", data[1])\n//         .attr(\"r\", 1)\n//         .attr(\"stroke\", \"black\");\n\n//     svg.append(\"g\")\n//         .attr(\"transform\", `translate(${margin.bottom}, 0)`)\n//         .call(yAxis);\n\n//     svg.append(\"g\")\n//         .attr(\"transform\", `translate(${margin.left}, ${height})`)\n//         .call(xAxis);\n// }\n\nfunction createGraph2(dataset) {\n  // Currently assumes data in [[key, value], ...] format\n\n  let margin = {\n    left: 50,\n    bottom: 50,\n    top: 50,\n    right: 50\n  }; // Define margins\n  let svgWidth = 1000,\n    svgHeight = 500; // Define container size\n  let width = svgWidth - margin.left - margin.right; // Define inner container size\n  let height = svgHeight - margin.bottom - margin.right; // Define inner container size\n  let eachWidth = width / dataset.length; // Define space between each data point\n\n  let svg = d3.select(\"#svg-graph\") // Set HTML element to container size\n  .attr(\"width\", svgWidth).attr(\"height\", svgHeight);\n  let xScale = d3.scaleTime() // Define x axis scaling to fill container area\n  .domain([new Date(\"2015-02-28\"), new Date(\"2023-02-28\")]).range([0, width]);\n  // .domain([0, 95])\n  // .range([0, width])\n\n  let yScale = d3.scaleLinear() // Define y axis scaling to fill container area\n  .domain([200, 400]).range([height, 0]);\n  let xAxis = d3.axisBottom() // Create x axis and define number of ticks\n  .scale(xScale).ticks(8);\n  let yAxis = d3.axisLeft() // Create y axis and define number of ticks\n  .scale(yScale);\n  let cpiChart = svg.selectAll(\"circle\") // Plot data points\n  .data(dataset) // Import dataset\n  .enter() // For each data element\n  .append(\"circle\") // Append to the SVG a circle element\n  .attr(\"transform\", `translate(${margin.left}, ${margin.bottom})`) // Account for padding\n  .attr(\"cx\", (data, index) => eachWidth * index) // x coordinate\n  .attr(\"cy\", data => yScale(data[1])) // y coordinate\n  .attr(\"r\", 1) // radius\n  .attr(\"stroke\", \"black\");\n  svg.append(\"g\") // Append y Axis\n  .attr(\"transform\", `translate(${margin.left}, ${margin.bottom})`).call(yAxis);\n  svg.append(\"g\") // Append x Axis\n  .attr(\"transform\", `translate(${margin.left}, ${svgHeight - margin.bottom})`).call(xAxis);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TyxHQUFFLENBQUMsQ0FBQztFQUFBLENBQ2pFVyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM3QixJQUFJLEVBQUUrQyxLQUFLLEtBQUt0QixTQUFTLEdBQUdzQixLQUFLLENBQUMsQ0FBQztFQUFBLENBQy9DbEIsSUFBSSxDQUFDLElBQUksRUFBRTdCLElBQUksSUFBSW1DLE1BQU0sQ0FBQ25DLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFBQSxDQUNwQzZCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFBQSxDQUNiQSxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQztFQUU1QkgsR0FBRyxDQUFDb0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQUEsQ0FDWGpCLElBQUksQ0FBQyxXQUFXLEVBQUcsYUFBWWIsTUFBTSxDQUFDQyxJQUFLLEtBQUlELE1BQU0sQ0FBQ0UsTUFBTyxHQUFFLENBQUMsQ0FDaEUrQixJQUFJLENBQUNSLEtBQUssQ0FBQztFQUVoQmYsR0FBRyxDQUFDb0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQUEsQ0FDWGpCLElBQUksQ0FBQyxXQUFXLEVBQUcsYUFBWWIsTUFBTSxDQUFDQyxJQUFLLEtBQUlLLFNBQVMsR0FBR04sTUFBTSxDQUFDRSxNQUFPLEdBQUUsQ0FBQyxDQUM1RStCLElBQUksQ0FBQ1osS0FBSyxDQUFDO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanNfd2Fsa3Rocm91Z2gvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBEYXRhID0gcmVxdWlyZSgnLi9zY3JpcHRzL2RhdGEuanMnKVxyXG5jb25zdCBDcmVhdGVHcmFwaCA9IHJlcXVpcmUoJy4vc2NyaXB0cy9jcmVhdGVHcmFwaC5qcycpO1xyXG5cclxuLy9PYmplY3Qgb3JpZW50ZWQgcHJvZ3JhbW1pbmcgLSBjb25zdHJ1Y3RvciBmb3IgZWFjaCBIVE1MIGVsZW1lbnRcclxuXHJcblxyXG5jb25zdCBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3ZnLWdyYXBoXCIpO1xyXG5jb25zdCBlbDIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVjaS1ncmFwaFwiKTtcclxubGV0IGNwaURhdGE7XHJcbi8vIGxldCBzYWxhcnlEYXRhO1xyXG5sZXQgZWNpRGF0YTtcclxuXHJcblxyXG5hc3luYyBmdW5jdGlvbiBmZXRjaERhdGEoKSB7XHJcbiAgICBjcGlEYXRhID0gYXdhaXQgZmV0Y2goXCJodHRwczovL2RhdGEubmFzZGFxLmNvbS9hcGkvdjMvZGF0YXNldHMvUkFURUlORi9DUElfVVNBP3N0YXJ0X2RhdGU9MjAxNS0wMi0yOCZlbmRfZGF0ZT0yMDIzLTAyLTI4JmFwaV9rZXk9ejRaaHdXa19MNVRwLU1zemRURkRcIilcclxuICAgIC50aGVuKGFzeW5jIGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHJlc3BvbnNlKVxyXG4gICAgICAgIGNwaURhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgICAgIGNyZWF0ZUdyYXBoMihjcGlEYXRhLmRhdGFzZXQuZGF0YS5yZXZlcnNlKCkpO1xyXG5cclxuICAgICAgICAvLyBkYXRhLmRhdGFzZXQuZGF0YS5mb3JFYWNoKChkYXRlKSA9PiB7XHJcbiAgICAgICAgLy8gICAgIGxldCBuZXdFbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIC8vICAgICBuZXdFbGUuaW5uZXJIVE1MID0gZGF0ZTtcclxuICAgICAgICAvLyAgICAgZWwuYXBwZW5kQ2hpbGQobmV3RWxlKTtcclxuICAgICAgICAvLyB9KVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG5ld0VsZSk7XHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIGNwaURhdGFcclxufVxyXG5cclxuLy8gc2FsYXJ5RGF0YSA9IGZldGNoKFwiaHR0cHM6Ly9hcGkuc3Rsb3Vpc2ZlZC5vcmcvZnJlZC9zZXJpZXMvb2JzZXJ2YXRpb25zP3Nlcmllc19pZD1DRVUwNTAwMDAwMDAzJmFwaV9rZXk9NTBjMzdjZjgyNmZmMGJiMmUxNWUxOWNiNmQxOTQ4M2YmZmlsZV90eXBlPWpzb25cIiwge2hlYWRlcnM6IHsnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogJyonfX0pXHJcbi8vICAgICAgICAgLnRoZW4oYXN5bmMgZnVuY3Rpb24ocmVzKSB7XHJcbi8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XHJcbi8vICAgICAgICAgICAgIHNhbGFyeURhdGEgPSByZXMuanNvbigpO1xyXG4vLyAgICAgICAgICAgICBjb25zb2xlLmxvZyhzYWxhcnlEYXRhKTtcclxuLy8gICAgICAgICB9KVxyXG5cclxuLy8gZmV0Y2goXCJodHRwczovL2FwaS5ibHMuZ292L3B1YmxpY0FQSS92Mi90aW1lc2VyaWVzL2RhdGEvQ01VMjAxMDAwMDAwMDAwMEQ/cmVnaXN0cmF0aW9ua2V5PTdmNTQ3ZGZhZmQyYjQ3MGNiZDUwNWRhYTgzOGI5MzA0JmNhdGFsb2c9dHJ1ZSZzdGFydHllYXI9MjAxNSZlbmR5ZWFyPTIwMjJcIilcclxuLy8gICAgIC50aGVuKGFzeW5jIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbi8vICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG4vLyAgICAgICAgIGVjaURhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbi8vICAgICAgICAgLy8gY29uc29sZS5sb2coZWNpRGF0YS5SZXN1bHRzLnNlcmllc1swXS5kYXRhKTtcclxuLy8gICAgICAgICBjcmVhdGVFY2lHcmFwaChlY2lEYXRhLlJlc3VsdHMuc2VyaWVzWzBdLmRhdGEucmV2ZXJzZSgpKTtcclxuLy8gICAgIH0pXHJcblxyXG5cclxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlRWNpR3JhcGgoc3RhcnRZZWFyLCBlbmRZZWFyLCB0eXBlPVwiZ2VuZXJhbFwiKSB7XHJcbiAgICBsZXQgZCA9IG5ldyBEYXRhKCk7XHJcbiAgICBsZXQgZyA9IG5ldyBDcmVhdGVHcmFwaCgpO1xyXG4gICAgbGV0IGRhdGFzZXQ7XHJcbiAgICBpZiAodHlwZSA9PT0gXCJnZW5lcmFsXCIpIHtcclxuICAgICAgICBkYXRhc2V0ID0gYXdhaXQgZC5mZXRjaFJlZ3VsYXJFY2lEYXRhKHN0YXJ0WWVhciwgZW5kWWVhcik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRhdGFzZXQgPSBhd2FpdCBkLmZldGNoRWNpRGF0YUJ5SW5kdXN0cnkodHlwZSwgc3RhcnRZZWFyLCBlbmRZZWFyKVxyXG4gICAgfVxyXG4gICAgZy5jcmVhdGVFY2lHcmFwaChkYXRhc2V0LCBzdGFydFllYXIsIGVuZFllYXIpXHJcbn1cclxuXHJcbmNyZWF0ZUVjaUdyYXBoKDIwMTIsIDIwMjIsIFwicHJvZmVzc2lvbmFsU2VydmljZXNcIik7XHJcblxyXG5mdW5jdGlvbiBfY3JlYXRlRWNpR3JhcGgoZGF0YXNldCwgc3RhcnRZZWFyLCBlbmRZZWFyKSB7XHJcbiAgICBjb25zb2xlLmxvZyhkYXRhc2V0KVxyXG4gICAgLy8gQ3VycmVudGx5IGFzc3VtZXMgZGF0YSBpbiBbW2tleSwgdmFsdWVdLCAuLi5dIGZvcm1hdFxyXG5cclxuICAgIGxldCBtYXJnaW4gPSB7bGVmdDogNTAsIGJvdHRvbTogNTAsIHRvcDogNTAsIHJpZ2h0OiA1MH0gLy8gRGVmaW5lIG1hcmdpbnNcclxuICAgIGxldCBzdmdXaWR0aCA9IDEwMDAsIHN2Z0hlaWdodCA9IDUwMCAvLyBEZWZpbmUgY29udGFpbmVyIHNpemVcclxuICAgIGxldCB3aWR0aCA9IHN2Z1dpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7IC8vIERlZmluZSBpbm5lciBjb250YWluZXIgc2l6ZVxyXG4gICAgbGV0IGhlaWdodCA9IHN2Z0hlaWdodCAtIG1hcmdpbi5ib3R0b20gLSBtYXJnaW4ucmlnaHQ7IC8vIERlZmluZSBpbm5lciBjb250YWluZXIgc2l6ZVxyXG4gICAgbGV0IGVhY2hXaWR0aCA9ICh3aWR0aCAvIGRhdGFzZXQubGVuZ3RoKSAvLyBEZWZpbmUgc3BhY2UgYmV0d2VlbiBlYWNoIGRhdGEgcG9pbnRcclxuXHJcbiAgICBsZXQgc3ZnID0gZDMuc2VsZWN0KFwiI2VjaS1ncmFwaFwiKSAvLyBTZXQgSFRNTCBlbGVtZW50IHRvIGNvbnRhaW5lciBzaXplXHJcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzdmdXaWR0aClcclxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBzdmdIZWlnaHQpXHJcblxyXG4gICAgbGV0IHhTY2FsZSA9IGQzLnNjYWxlVGltZSgpIC8vIERlZmluZSB4IGF4aXMgc2NhbGluZyB0byBmaWxsIGNvbnRhaW5lciBhcmVhXHJcbiAgICAgICAgLmRvbWFpbihbbmV3IERhdGUoYCR7c3RhcnRZZWFyfS0wMy0zMWApLCBuZXcgRGF0ZShgJHtlbmRZZWFyfS0xMi0zMWApXSlcclxuICAgICAgICAucmFuZ2UoWzAsIHdpZHRoXSlcclxuICAgICAgICAvLyAuZG9tYWluKFswLCA5NV0pXHJcbiAgICAgICAgLy8gLnJhbmdlKFswLCB3aWR0aF0pXHJcblxyXG4gICAgbGV0IHlTY2FsZSA9IGQzLnNjYWxlTGluZWFyKCkgLy8gRGVmaW5lIHkgYXhpcyBzY2FsaW5nIHRvIGZpbGwgY29udGFpbmVyIGFyZWFcclxuICAgICAgICAuZG9tYWluKFswLCAyXSlcclxuICAgICAgICAucmFuZ2UoW2hlaWdodCwgMF0pXHJcbiAgICBcclxuICAgIGxldCB4QXhpcyA9IGQzLmF4aXNCb3R0b20oKSAvLyBDcmVhdGUgeCBheGlzIGFuZCBkZWZpbmUgbnVtYmVyIG9mIHRpY2tzXHJcbiAgICAgICAgLnNjYWxlKHhTY2FsZSlcclxuICAgICAgICAudGlja3MoOClcclxuXHJcbiAgICBsZXQgeUF4aXMgPSBkMy5heGlzTGVmdCgpIC8vIENyZWF0ZSB5IGF4aXMgYW5kIGRlZmluZSBudW1iZXIgb2YgdGlja3NcclxuICAgICAgICAuc2NhbGUoeVNjYWxlKVxyXG5cclxuICAgIGxldCBjcGlDaGFydCA9IHN2Zy5zZWxlY3RBbGwoXCJjaXJjbGVcIikgLy8gUGxvdCBkYXRhIHBvaW50c1xyXG4gICAgICAgIC5kYXRhKGRhdGFzZXQpIC8vIEltcG9ydCBkYXRhc2V0XHJcbiAgICAgICAgLmVudGVyKCkgLy8gRm9yIGVhY2ggZGF0YSBlbGVtZW50XHJcbiAgICAgICAgLmFwcGVuZChcImNpcmNsZVwiKSAvLyBBcHBlbmQgdG8gdGhlIFNWRyBhIGNpcmNsZSBlbGVtZW50XHJcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwgJHttYXJnaW4uYm90dG9tfSlgKSAvLyBBY2NvdW50IGZvciBwYWRkaW5nXHJcbiAgICAgICAgLmF0dHIoXCJjeFwiLCAoZGF0YSwgaW5kZXgpID0+IGVhY2hXaWR0aCAqIGluZGV4KSAvLyB4IGNvb3JkaW5hdGVcclxuICAgICAgICAuYXR0cihcImN5XCIsIGRhdGEgPT4geVNjYWxlKGRhdGEudmFsdWUpKSAvLyB5IGNvb3JkaW5hdGVcclxuICAgICAgICAuYXR0cihcInJcIiwgMSkgLy8gcmFkaXVzXHJcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJibGFja1wiKTtcclxuXHJcbiAgICBzdmcuYXBwZW5kKFwiZ1wiKSAvLyBBcHBlbmQgeSBBeGlzXHJcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwgJHttYXJnaW4uYm90dG9tfSlgKVxyXG4gICAgICAgIC5jYWxsKHlBeGlzKTtcclxuXHJcbiAgICBzdmcuYXBwZW5kKFwiZ1wiKSAvLyBBcHBlbmQgeCBBeGlzXHJcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwgJHtzdmdIZWlnaHQgLSBtYXJnaW4uYm90dG9tfSlgKVxyXG4gICAgICAgIC5jYWxsKHhBeGlzKTtcclxufVxyXG5cclxuXHJcbi8vIGZ1bmN0aW9uIGNyZWF0ZUdyYXBoMihkYXRhc2V0KSB7XHJcbi8vICAgICAvLyBDdXJyZW50bHkgYXNzdW1lcyBkYXRhIGluIFtba2V5LCB2YWx1ZV0sIC4uLl0gZm9ybWF0XHJcblxyXG4vLyAgICAgbGV0IG1hcmdpbiA9IHtsZWZ0OiA1MCwgYm90dG9tOiA1MCwgdG9wOiA1MCwgcmlnaHQ6IDUwfSAvLyBEZWZpbmUgbWFyZ2luc1xyXG4vLyAgICAgbGV0IHN2Z1dpZHRoID0gMTAwMCwgc3ZnSGVpZ2h0ID0gNTAwIC8vIERlZmluZSBjb250YWluZXIgc2l6ZVxyXG4vLyAgICAgbGV0IHdpZHRoID0gc3ZnV2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDsgLy8gRGVmaW5lIGlubmVyIGNvbnRhaW5lciBzaXplXHJcbi8vICAgICBsZXQgaGVpZ2h0ID0gc3ZnSGVpZ2h0IC0gbWFyZ2luLmJvdHRvbSAtIG1hcmdpbi5yaWdodDsgLy8gRGVmaW5lIGlubmVyIGNvbnRhaW5lciBzaXplXHJcbi8vICAgICBsZXQgZWFjaFdpZHRoID0gKHdpZHRoIC8gZGF0YXNldC5sZW5ndGgpIC8vIERlZmluZSBzcGFjZSBiZXR3ZWVuIGVhY2ggZGF0YSBwb2ludFxyXG5cclxuLy8gICAgIGxldCBzdmcgPSBkMy5zZWxlY3QoXCIjc3ZnLWdyYXBoXCIpIC8vIFNldCBIVE1MIGVsZW1lbnQgdG8gY29udGFpbmVyIHNpemVcclxuLy8gICAgICAgICAuYXR0cihcIndpZHRoXCIsIHN2Z1dpZHRoKVxyXG4vLyAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHN2Z0hlaWdodClcclxuXHJcbi8vICAgICBsZXQgeFNjYWxlID0gZDMuc2NhbGVUaW1lKCkgLy8gRGVmaW5lIHggYXhpcyBzY2FsaW5nIHRvIGZpbGwgY29udGFpbmVyIGFyZWFcclxuLy8gICAgICAgICAuZG9tYWluKFtuZXcgRGF0ZShcIjIwMTUtMDItMjhcIiksIG5ldyBEYXRlKFwiMjAyMy0wMi0yOFwiKV0pXHJcbi8vICAgICAgICAgLnJhbmdlKFswLCB3aWR0aF0pXHJcbi8vICAgICAgICAgLy8gLmRvbWFpbihbMCwgOTVdKVxyXG4vLyAgICAgICAgIC8vIC5yYW5nZShbMCwgd2lkdGhdKVxyXG5cclxuLy8gICAgIGxldCB5U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpIC8vIERlZmluZSB5IGF4aXMgc2NhbGluZyB0byBmaWxsIGNvbnRhaW5lciBhcmVhXHJcbi8vICAgICAgICAgLmRvbWFpbihbMjAwLCA0MDBdKVxyXG4vLyAgICAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSlcclxuICAgIFxyXG4vLyAgICAgbGV0IHhBeGlzID0gZDMuYXhpc0JvdHRvbSgpIC8vIENyZWF0ZSB4IGF4aXMgYW5kIGRlZmluZSBudW1iZXIgb2YgdGlja3NcclxuLy8gICAgICAgICAuc2NhbGUoeFNjYWxlKVxyXG4vLyAgICAgICAgIC50aWNrcyg4KVxyXG5cclxuLy8gICAgIGxldCB5QXhpcyA9IGQzLmF4aXNMZWZ0KCkgLy8gQ3JlYXRlIHkgYXhpcyBhbmQgZGVmaW5lIG51bWJlciBvZiB0aWNrc1xyXG4vLyAgICAgICAgIC5zY2FsZSh5U2NhbGUpXHJcblxyXG4vLyAgICAgbGV0IGNwaUNoYXJ0ID0gc3ZnLnNlbGVjdEFsbChcImNpcmNsZVwiKSAvLyBQbG90IGRhdGEgcG9pbnRzXHJcbi8vICAgICAgICAgLmRhdGEoZGF0YXNldCkgLy8gSW1wb3J0IGRhdGFzZXRcclxuLy8gICAgICAgICAuZW50ZXIoKSAvLyBGb3IgZWFjaCBkYXRhIGVsZW1lbnRcclxuLy8gICAgICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpIC8vIEFwcGVuZCB0byB0aGUgU1ZHIGEgY2lyY2xlIGVsZW1lbnRcclxuLy8gICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCAke21hcmdpbi5ib3R0b219KWApIC8vIEFjY291bnQgZm9yIHBhZGRpbmdcclxuLy8gICAgICAgICAuYXR0cihcImN4XCIsIChkYXRhLCBpbmRleCkgPT4gZWFjaFdpZHRoICogaW5kZXgpIC8vIHggY29vcmRpbmF0ZVxyXG4vLyAgICAgICAgIC5hdHRyKFwiY3lcIiwgZGF0YSA9PiB5U2NhbGUoZGF0YVsxXSkpIC8vIHkgY29vcmRpbmF0ZVxyXG4vLyAgICAgICAgIC5hdHRyKFwiclwiLCAxKSAvLyByYWRpdXNcclxuLy8gICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImJsYWNrXCIpO1xyXG5cclxuLy8gICAgIHN2Zy5hcHBlbmQoXCJnXCIpIC8vIEFwcGVuZCB5IEF4aXNcclxuLy8gICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCAke21hcmdpbi5ib3R0b219KWApXHJcbi8vICAgICAgICAgLmNhbGwoeUF4aXMpO1xyXG5cclxuLy8gICAgIHN2Zy5hcHBlbmQoXCJnXCIpIC8vIEFwcGVuZCB4IEF4aXNcclxuLy8gICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCAke3N2Z0hlaWdodCAtIG1hcmdpbi5ib3R0b219KWApXHJcbi8vICAgICAgICAgLmNhbGwoeEF4aXMpO1xyXG4vLyB9XHJcblxyXG5mZXRjaERhdGEoKTtcclxuXHJcbmxldCB0b2dnbGVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvZ2dsZS1ncmFwaFwiKTtcclxuXHJcbnRvZ2dsZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUNsaWNrKTtcclxuXHJcblxyXG5mdW5jdGlvbiBoYW5kbGVDbGljayhlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhlbC5zdHlsZS5kaXNwbGF5KVxyXG4gICAgaWYgKGVsLmdldEF0dHJpYnV0ZShcInZpc2liaWxpdHlcIikgIT09IFwidmlzaWJsZVwiKSB7XHJcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKFwidmlzaWJpbGl0eVwiLCBcInZpc2libGVcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIGNvbnNvbGUubG9nKGRhdGFzZXQpO1xyXG4vLyBjcmVhdGVHcmFwaChkYXRhc2V0KVxyXG5cclxuLy8gZnVuY3Rpb24gY3JlYXRlR3JhcGgoZGF0YXNldCkge1xyXG4vLyAgICAgLy8gQ3VycmVudGx5IGFzc3VtZXMgZGF0YSBpbiBbW2tleSwgdmFsdWVdLCAuLi5dIGZvcm1hdFxyXG4vLyAgICAgbGV0IG1hcmdpbiA9IHtsZWZ0OiA1MCwgYm90dG9tOiA1MH1cclxuLy8gICAgIGxldCBzdmdXaWR0aCA9IDEwMDAsIHN2Z0hlaWdodCA9IDUwMFxyXG4vLyAgICAgbGV0IHdpZHRoID0gc3ZnV2lkdGggLSBtYXJnaW4ubGVmdDtcclxuLy8gICAgIGxldCBoZWlnaHQgPSBzdmdIZWlnaHQgLSBtYXJnaW4uYm90dG9tO1xyXG4vLyAgICAgbGV0IGJhcldpZHRoID0gKHN2Z1dpZHRoIC8gZGF0YXNldC5sZW5ndGgpIC8vIE1heSBuZWVkIHRvIHVwZGF0ZVxyXG5cclxuLy8gICAgIGxldCBzdmcgPSBkMy5zZWxlY3QoXCIjc3ZnLWdyYXBoXCIpXHJcbi8vICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzdmdXaWR0aClcclxuLy8gICAgICAgICAuYXR0cihcImhlaWdodFwiLCBzdmdIZWlnaHQpXHJcblxyXG4vLyAgICAgbGV0IHhTY2FsZSA9IGQzLnNjYWxlVGltZSgpXHJcbi8vICAgICAgICAgLmRvbWFpbihbbmV3IERhdGUoXCIyMDE1LTAyLTI4XCIpLCBuZXcgRGF0ZShcIjIwMjMtMDItMjhcIildKVxyXG4vLyAgICAgICAgIC5yYW5nZShbMCwgd2lkdGhdKVxyXG4vLyAgICAgICAgIC8vIC5kb21haW4oWzAsIDk1XSlcclxuLy8gICAgICAgICAvLyAucmFuZ2UoWzAsIHdpZHRoXSlcclxuXHJcbi8vICAgICBsZXQgeVNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKVxyXG4vLyAgICAgICAgIC5kb21haW4oWzIwMCwgNDAwXSlcclxuLy8gICAgICAgICAucmFuZ2UoW2hlaWdodCwgMF0pXHJcbiAgICBcclxuLy8gICAgIGxldCB4QXhpcyA9IGQzLmF4aXNCb3R0b20oKVxyXG4vLyAgICAgICAgIC5zY2FsZSh4U2NhbGUpXHJcbi8vICAgICAgICAgLnRpY2tzKDgpXHJcblxyXG4vLyAgICAgbGV0IHlBeGlzID0gZDMuYXhpc0xlZnQoKVxyXG4vLyAgICAgICAgIC5zY2FsZSh5U2NhbGUpXHJcblxyXG4vLyAgICAgbGV0IGNoYXJ0ID0gc3ZnLnNlbGVjdEFsbChcImNpcmNsZVwiKVxyXG4vLyAgICAgICAgIC5kYXRhKGRhdGFzZXQpXHJcbi8vICAgICAgICAgLmVudGVyKClcclxuLy8gICAgICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXHJcbi8vICAgICAgICAgLmF0dHIoXCJjeFwiLCAoZGF0YSwgaW5kZXgpID0+IG1hcmdpbi5sZWZ0ICsgYmFyV2lkdGggKiBpbmRleClcclxuLy8gICAgICAgICAuYXR0cihcImN5XCIsIGRhdGEgPT4geVNjYWxlKGRhdGFbMV0pKVxyXG4vLyAgICAgICAgIC5hdHRyKFwiZGF0YS15XCIsIGRhdGFbMV0pXHJcbi8vICAgICAgICAgLmF0dHIoXCJyXCIsIDEpXHJcbi8vICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJibGFja1wiKTtcclxuXHJcbi8vICAgICBzdmcuYXBwZW5kKFwiZ1wiKVxyXG4vLyAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHttYXJnaW4uYm90dG9tfSwgMClgKVxyXG4vLyAgICAgICAgIC5jYWxsKHlBeGlzKTtcclxuXHJcbi8vICAgICBzdmcuYXBwZW5kKFwiZ1wiKVxyXG4vLyAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sICR7aGVpZ2h0fSlgKVxyXG4vLyAgICAgICAgIC5jYWxsKHhBeGlzKTtcclxuLy8gfVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlR3JhcGgyKGRhdGFzZXQpIHtcclxuICAgIC8vIEN1cnJlbnRseSBhc3N1bWVzIGRhdGEgaW4gW1trZXksIHZhbHVlXSwgLi4uXSBmb3JtYXRcclxuXHJcbiAgICBsZXQgbWFyZ2luID0ge2xlZnQ6IDUwLCBib3R0b206IDUwLCB0b3A6IDUwLCByaWdodDogNTB9IC8vIERlZmluZSBtYXJnaW5zXHJcbiAgICBsZXQgc3ZnV2lkdGggPSAxMDAwLCBzdmdIZWlnaHQgPSA1MDAgLy8gRGVmaW5lIGNvbnRhaW5lciBzaXplXHJcbiAgICBsZXQgd2lkdGggPSBzdmdXaWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0OyAvLyBEZWZpbmUgaW5uZXIgY29udGFpbmVyIHNpemVcclxuICAgIGxldCBoZWlnaHQgPSBzdmdIZWlnaHQgLSBtYXJnaW4uYm90dG9tIC0gbWFyZ2luLnJpZ2h0OyAvLyBEZWZpbmUgaW5uZXIgY29udGFpbmVyIHNpemVcclxuICAgIGxldCBlYWNoV2lkdGggPSAod2lkdGggLyBkYXRhc2V0Lmxlbmd0aCkgLy8gRGVmaW5lIHNwYWNlIGJldHdlZW4gZWFjaCBkYXRhIHBvaW50XHJcblxyXG4gICAgbGV0IHN2ZyA9IGQzLnNlbGVjdChcIiNzdmctZ3JhcGhcIikgLy8gU2V0IEhUTUwgZWxlbWVudCB0byBjb250YWluZXIgc2l6ZVxyXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgc3ZnV2lkdGgpXHJcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc3ZnSGVpZ2h0KVxyXG5cclxuICAgIGxldCB4U2NhbGUgPSBkMy5zY2FsZVRpbWUoKSAvLyBEZWZpbmUgeCBheGlzIHNjYWxpbmcgdG8gZmlsbCBjb250YWluZXIgYXJlYVxyXG4gICAgICAgIC5kb21haW4oW25ldyBEYXRlKFwiMjAxNS0wMi0yOFwiKSwgbmV3IERhdGUoXCIyMDIzLTAyLTI4XCIpXSlcclxuICAgICAgICAucmFuZ2UoWzAsIHdpZHRoXSlcclxuICAgICAgICAvLyAuZG9tYWluKFswLCA5NV0pXHJcbiAgICAgICAgLy8gLnJhbmdlKFswLCB3aWR0aF0pXHJcblxyXG4gICAgbGV0IHlTY2FsZSA9IGQzLnNjYWxlTGluZWFyKCkgLy8gRGVmaW5lIHkgYXhpcyBzY2FsaW5nIHRvIGZpbGwgY29udGFpbmVyIGFyZWFcclxuICAgICAgICAuZG9tYWluKFsyMDAsIDQwMF0pXHJcbiAgICAgICAgLnJhbmdlKFtoZWlnaHQsIDBdKVxyXG4gICAgXHJcbiAgICBsZXQgeEF4aXMgPSBkMy5heGlzQm90dG9tKCkgLy8gQ3JlYXRlIHggYXhpcyBhbmQgZGVmaW5lIG51bWJlciBvZiB0aWNrc1xyXG4gICAgICAgIC5zY2FsZSh4U2NhbGUpXHJcbiAgICAgICAgLnRpY2tzKDgpXHJcblxyXG4gICAgbGV0IHlBeGlzID0gZDMuYXhpc0xlZnQoKSAvLyBDcmVhdGUgeSBheGlzIGFuZCBkZWZpbmUgbnVtYmVyIG9mIHRpY2tzXHJcbiAgICAgICAgLnNjYWxlKHlTY2FsZSlcclxuXHJcbiAgICBsZXQgY3BpQ2hhcnQgPSBzdmcuc2VsZWN0QWxsKFwiY2lyY2xlXCIpIC8vIFBsb3QgZGF0YSBwb2ludHNcclxuICAgICAgICAuZGF0YShkYXRhc2V0KSAvLyBJbXBvcnQgZGF0YXNldFxyXG4gICAgICAgIC5lbnRlcigpIC8vIEZvciBlYWNoIGRhdGEgZWxlbWVudFxyXG4gICAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIikgLy8gQXBwZW5kIHRvIHRoZSBTVkcgYSBjaXJjbGUgZWxlbWVudFxyXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sICR7bWFyZ2luLmJvdHRvbX0pYCkgLy8gQWNjb3VudCBmb3IgcGFkZGluZ1xyXG4gICAgICAgIC5hdHRyKFwiY3hcIiwgKGRhdGEsIGluZGV4KSA9PiBlYWNoV2lkdGggKiBpbmRleCkgLy8geCBjb29yZGluYXRlXHJcbiAgICAgICAgLmF0dHIoXCJjeVwiLCBkYXRhID0+IHlTY2FsZShkYXRhWzFdKSkgLy8geSBjb29yZGluYXRlXHJcbiAgICAgICAgLmF0dHIoXCJyXCIsIDEpIC8vIHJhZGl1c1xyXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiYmxhY2tcIik7XHJcblxyXG4gICAgc3ZnLmFwcGVuZChcImdcIikgLy8gQXBwZW5kIHkgQXhpc1xyXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sICR7bWFyZ2luLmJvdHRvbX0pYClcclxuICAgICAgICAuY2FsbCh5QXhpcyk7XHJcblxyXG4gICAgc3ZnLmFwcGVuZChcImdcIikgLy8gQXBwZW5kIHggQXhpc1xyXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sICR7c3ZnSGVpZ2h0IC0gbWFyZ2luLmJvdHRvbX0pYClcclxuICAgICAgICAuY2FsbCh4QXhpcyk7XHJcbn1cclxuXHJcbiJdLCJuYW1lcyI6WyJEYXRhIiwicmVxdWlyZSIsIkNyZWF0ZUdyYXBoIiwiZWwiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZWwyIiwiY3BpRGF0YSIsImVjaURhdGEiLCJmZXRjaERhdGEiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsImpzb24iLCJjcmVhdGVHcmFwaDIiLCJkYXRhc2V0IiwiZGF0YSIsInJldmVyc2UiLCJjcmVhdGVFY2lHcmFwaCIsInN0YXJ0WWVhciIsImVuZFllYXIiLCJ0eXBlIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiZCIsImciLCJmZXRjaFJlZ3VsYXJFY2lEYXRhIiwiZmV0Y2hFY2lEYXRhQnlJbmR1c3RyeSIsIl9jcmVhdGVFY2lHcmFwaCIsImNvbnNvbGUiLCJsb2ciLCJtYXJnaW4iLCJsZWZ0IiwiYm90dG9tIiwidG9wIiwicmlnaHQiLCJzdmdXaWR0aCIsInN2Z0hlaWdodCIsIndpZHRoIiwiaGVpZ2h0IiwiZWFjaFdpZHRoIiwic3ZnIiwiZDMiLCJzZWxlY3QiLCJhdHRyIiwieFNjYWxlIiwic2NhbGVUaW1lIiwiZG9tYWluIiwiRGF0ZSIsInJhbmdlIiwieVNjYWxlIiwic2NhbGVMaW5lYXIiLCJ4QXhpcyIsImF4aXNCb3R0b20iLCJzY2FsZSIsInRpY2tzIiwieUF4aXMiLCJheGlzTGVmdCIsImNwaUNoYXJ0Iiwic2VsZWN0QWxsIiwiZW50ZXIiLCJhcHBlbmQiLCJpbmRleCIsInZhbHVlIiwiY2FsbCIsInRvZ2dsZUJ1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVDbGljayIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/createGraph.js":
/*!************************************!*\
  !*** ./src/scripts/createGraph.js ***!
  \************************************/
/***/ (function(module) {

eval("class CreateGraph {\n  createEciGraph(dataset, startYear, endYear) {\n    console.log(dataset);\n    // Currently assumes data in [[key, value], ...] format\n\n    let margin = {\n      left: 50,\n      bottom: 50,\n      top: 50,\n      right: 50\n    }; // Define margins\n    let svgWidth = 1000,\n      svgHeight = 500; // Define container size\n    let width = svgWidth - margin.left - margin.right; // Define inner container size\n    let height = svgHeight - margin.bottom - margin.right; // Define inner container size\n    let eachWidth = width / dataset.length; // Define space between each data point\n\n    let svg = d3.select(\"#eci-graph\") // Set HTML element to container size\n    .attr(\"width\", svgWidth).attr(\"height\", svgHeight);\n    let xScale = d3.scaleTime() // Define x axis scaling to fill container area\n    .domain([new Date(`${startYear}-03-31`), new Date(`${endYear}-12-31`)]).range([0, width]);\n    // .domain([0, 95])\n    // .range([0, width])\n\n    let yScale = d3.scaleLinear() // Define y axis scaling to fill container area\n    .domain([0, 2]).range([height, 0]);\n    let xAxis = d3.axisBottom() // Create x axis and define number of ticks\n    .scale(xScale).ticks(8);\n    let yAxis = d3.axisLeft() // Create y axis and define number of ticks\n    .scale(yScale);\n    let cpiChart = svg.selectAll(\"circle\") // Plot data points\n    .data(dataset) // Import dataset\n    .enter() // For each data element\n    .append(\"circle\") // Append to the SVG a circle element\n    .attr(\"transform\", `translate(${margin.left}, ${margin.bottom})`) // Account for padding\n    .attr(\"cx\", (data, index) => eachWidth * index) // x coordinate\n    .attr(\"cy\", data => yScale(data.value)) // y coordinate\n    .attr(\"r\", 1) // radius\n    .attr(\"stroke\", \"black\");\n    svg.append(\"g\") // Append y Axis\n    .attr(\"transform\", `translate(${margin.left}, ${margin.bottom})`).call(yAxis);\n    svg.append(\"g\") // Append x Axis\n    .attr(\"transform\", `translate(${margin.left}, ${svgHeight - margin.bottom})`).call(xAxis);\n  }\n}\nmodule.exports = CreateGraph;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9jcmVhdGVHcmFwaC5qcy5qcyIsIm5hbWVzIjpbIkNyZWF0ZUdyYXBoIiwiY3JlYXRlRWNpR3JhcGgiLCJkYXRhc2V0Iiwic3RhcnRZZWFyIiwiZW5kWWVhciIsImNvbnNvbGUiLCJsb2ciLCJtYXJnaW4iLCJsZWZ0IiwiYm90dG9tIiwidG9wIiwicmlnaHQiLCJzdmdXaWR0aCIsInN2Z0hlaWdodCIsIndpZHRoIiwiaGVpZ2h0IiwiZWFjaFdpZHRoIiwibGVuZ3RoIiwic3ZnIiwiZDMiLCJzZWxlY3QiLCJhdHRyIiwieFNjYWxlIiwic2NhbGVUaW1lIiwiZG9tYWluIiwiRGF0ZSIsInJhbmdlIiwieVNjYWxlIiwic2NhbGVMaW5lYXIiLCJ4QXhpcyIsImF4aXNCb3R0b20iLCJzY2FsZSIsInRpY2tzIiwieUF4aXMiLCJheGlzTGVmdCIsImNwaUNoYXJ0Iiwic2VsZWN0QWxsIiwiZGF0YSIsImVudGVyIiwiYXBwZW5kIiwiaW5kZXgiLCJ2YWx1ZSIsImNhbGwiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qc193YWxrdGhyb3VnaC8uL3NyYy9zY3JpcHRzL2NyZWF0ZUdyYXBoLmpzPzhjM2EiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQ3JlYXRlR3JhcGgge1xyXG5cclxuICAgIGNyZWF0ZUVjaUdyYXBoKGRhdGFzZXQsIHN0YXJ0WWVhciwgZW5kWWVhcikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGFzZXQpXHJcbiAgICAgICAgLy8gQ3VycmVudGx5IGFzc3VtZXMgZGF0YSBpbiBbW2tleSwgdmFsdWVdLCAuLi5dIGZvcm1hdFxyXG4gICAgXHJcbiAgICAgICAgbGV0IG1hcmdpbiA9IHtsZWZ0OiA1MCwgYm90dG9tOiA1MCwgdG9wOiA1MCwgcmlnaHQ6IDUwfSAvLyBEZWZpbmUgbWFyZ2luc1xyXG4gICAgICAgIGxldCBzdmdXaWR0aCA9IDEwMDAsIHN2Z0hlaWdodCA9IDUwMCAvLyBEZWZpbmUgY29udGFpbmVyIHNpemVcclxuICAgICAgICBsZXQgd2lkdGggPSBzdmdXaWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0OyAvLyBEZWZpbmUgaW5uZXIgY29udGFpbmVyIHNpemVcclxuICAgICAgICBsZXQgaGVpZ2h0ID0gc3ZnSGVpZ2h0IC0gbWFyZ2luLmJvdHRvbSAtIG1hcmdpbi5yaWdodDsgLy8gRGVmaW5lIGlubmVyIGNvbnRhaW5lciBzaXplXHJcbiAgICAgICAgbGV0IGVhY2hXaWR0aCA9ICh3aWR0aCAvIGRhdGFzZXQubGVuZ3RoKSAvLyBEZWZpbmUgc3BhY2UgYmV0d2VlbiBlYWNoIGRhdGEgcG9pbnRcclxuICAgIFxyXG4gICAgICAgIGxldCBzdmcgPSBkMy5zZWxlY3QoXCIjZWNpLWdyYXBoXCIpIC8vIFNldCBIVE1MIGVsZW1lbnQgdG8gY29udGFpbmVyIHNpemVcclxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzdmdXaWR0aClcclxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc3ZnSGVpZ2h0KVxyXG4gICAgXHJcbiAgICAgICAgbGV0IHhTY2FsZSA9IGQzLnNjYWxlVGltZSgpIC8vIERlZmluZSB4IGF4aXMgc2NhbGluZyB0byBmaWxsIGNvbnRhaW5lciBhcmVhXHJcbiAgICAgICAgICAgIC5kb21haW4oW25ldyBEYXRlKGAke3N0YXJ0WWVhcn0tMDMtMzFgKSwgbmV3IERhdGUoYCR7ZW5kWWVhcn0tMTItMzFgKV0pXHJcbiAgICAgICAgICAgIC5yYW5nZShbMCwgd2lkdGhdKVxyXG4gICAgICAgICAgICAvLyAuZG9tYWluKFswLCA5NV0pXHJcbiAgICAgICAgICAgIC8vIC5yYW5nZShbMCwgd2lkdGhdKVxyXG4gICAgXHJcbiAgICAgICAgbGV0IHlTY2FsZSA9IGQzLnNjYWxlTGluZWFyKCkgLy8gRGVmaW5lIHkgYXhpcyBzY2FsaW5nIHRvIGZpbGwgY29udGFpbmVyIGFyZWFcclxuICAgICAgICAgICAgLmRvbWFpbihbMCwgMl0pXHJcbiAgICAgICAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSlcclxuICAgICAgICBcclxuICAgICAgICBsZXQgeEF4aXMgPSBkMy5heGlzQm90dG9tKCkgLy8gQ3JlYXRlIHggYXhpcyBhbmQgZGVmaW5lIG51bWJlciBvZiB0aWNrc1xyXG4gICAgICAgICAgICAuc2NhbGUoeFNjYWxlKVxyXG4gICAgICAgICAgICAudGlja3MoOClcclxuICAgIFxyXG4gICAgICAgIGxldCB5QXhpcyA9IGQzLmF4aXNMZWZ0KCkgLy8gQ3JlYXRlIHkgYXhpcyBhbmQgZGVmaW5lIG51bWJlciBvZiB0aWNrc1xyXG4gICAgICAgICAgICAuc2NhbGUoeVNjYWxlKVxyXG4gICAgXHJcbiAgICAgICAgbGV0IGNwaUNoYXJ0ID0gc3ZnLnNlbGVjdEFsbChcImNpcmNsZVwiKSAvLyBQbG90IGRhdGEgcG9pbnRzXHJcbiAgICAgICAgICAgIC5kYXRhKGRhdGFzZXQpIC8vIEltcG9ydCBkYXRhc2V0XHJcbiAgICAgICAgICAgIC5lbnRlcigpIC8vIEZvciBlYWNoIGRhdGEgZWxlbWVudFxyXG4gICAgICAgICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpIC8vIEFwcGVuZCB0byB0aGUgU1ZHIGEgY2lyY2xlIGVsZW1lbnRcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwgJHttYXJnaW4uYm90dG9tfSlgKSAvLyBBY2NvdW50IGZvciBwYWRkaW5nXHJcbiAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgKGRhdGEsIGluZGV4KSA9PiBlYWNoV2lkdGggKiBpbmRleCkgLy8geCBjb29yZGluYXRlXHJcbiAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgZGF0YSA9PiB5U2NhbGUoZGF0YS52YWx1ZSkpIC8vIHkgY29vcmRpbmF0ZVxyXG4gICAgICAgICAgICAuYXR0cihcInJcIiwgMSkgLy8gcmFkaXVzXHJcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiYmxhY2tcIik7XHJcbiAgICBcclxuICAgICAgICBzdmcuYXBwZW5kKFwiZ1wiKSAvLyBBcHBlbmQgeSBBeGlzXHJcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sICR7bWFyZ2luLmJvdHRvbX0pYClcclxuICAgICAgICAgICAgLmNhbGwoeUF4aXMpO1xyXG4gICAgXHJcbiAgICAgICAgc3ZnLmFwcGVuZChcImdcIikgLy8gQXBwZW5kIHggQXhpc1xyXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCAke3N2Z0hlaWdodCAtIG1hcmdpbi5ib3R0b219KWApXHJcbiAgICAgICAgICAgIC5jYWxsKHhBeGlzKTtcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBDcmVhdGVHcmFwaDsiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFdBQVcsQ0FBQztFQUVkQyxjQUFjQSxDQUFDQyxPQUFPLEVBQUVDLFNBQVMsRUFBRUMsT0FBTyxFQUFFO0lBQ3hDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0osT0FBTyxDQUFDO0lBQ3BCOztJQUVBLElBQUlLLE1BQU0sR0FBRztNQUFDQyxJQUFJLEVBQUUsRUFBRTtNQUFFQyxNQUFNLEVBQUUsRUFBRTtNQUFFQyxHQUFHLEVBQUUsRUFBRTtNQUFFQyxLQUFLLEVBQUU7SUFBRSxDQUFDLEVBQUM7SUFDeEQsSUFBSUMsUUFBUSxHQUFHLElBQUk7TUFBRUMsU0FBUyxHQUFHLEdBQUcsRUFBQztJQUNyQyxJQUFJQyxLQUFLLEdBQUdGLFFBQVEsR0FBR0wsTUFBTSxDQUFDQyxJQUFJLEdBQUdELE1BQU0sQ0FBQ0ksS0FBSyxDQUFDLENBQUM7SUFDbkQsSUFBSUksTUFBTSxHQUFHRixTQUFTLEdBQUdOLE1BQU0sQ0FBQ0UsTUFBTSxHQUFHRixNQUFNLENBQUNJLEtBQUssQ0FBQyxDQUFDO0lBQ3ZELElBQUlLLFNBQVMsR0FBSUYsS0FBSyxHQUFH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\n//# sourceURL=webpack-internal:///./src/scripts/createGraph.js\n");

/***/ }),

/***/ "./src/scripts/data.js":
/*!*****************************!*\
  !*** ./src/scripts/data.js ***!
  \*****************************/
/***/ (function(module) {

eval("//\tTotal compensation for Private industry workers in various industries and occupations, 3-month percent change\n\nclass Data {\n  constructor(url) {\n    this.url = url;\n  }\n  async fetchRegularEciData(startYear, endYear) {\n    return fetch(`https://api.bls.gov/publicAPI/v2/timeseries/data/CIS2010000000000Q?registrationkey=7f547dfafd2b470cbd505daa838b9304&catalog=true&startyear=${startYear}&endyear=${endYear}`).then(function (response) {\n      return response.json();\n    }).then(res => {\n      // console.log(res)\n      return res.Results.series[0].data.reverse();\n    });\n  }\n  async fetchEciDataByIndustry(industry, startYear, endYear) {\n    const seriesId = {\n      finance: \"CIS201520A000000Q\",\n      professionalServices: \"CIS201540A000000Q\",\n      educationAndHealthServices: \"CIS2016000000000Q\",\n      leisureAndHospitality: \"CIS2017000000000Q\",\n      goodProducing: \"CIS201G000000000Q\",\n      serviceProviding: \"CIS201S000000000Q\"\n    };\n    return fetch(`https://api.bls.gov/publicAPI/v2/timeseries/data/${seriesId[industry]}?registrationkey=7f547dfafd2b470cbd505daa838b9304&catalog=true&startyear=${startYear}&endyear=${endYear}`).then(async function (response) {\n      return response.json();\n    }).then(res => {\n      return res.Results.series[0].data.reverse();\n    });\n  }\n}\nmodule.exports = Data;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9kYXRhLmpzLmpzIiwibmFtZXMiOlsiRGF0YSIsImNvbnN0cnVjdG9yIiwidXJsIiwiZmV0Y2hSZWd1bGFyRWNpRGF0YSIsInN0YXJ0WWVhciIsImVuZFllYXIiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsImpzb24iLCJyZXMiLCJSZXN1bHRzIiwic2VyaWVzIiwiZGF0YSIsInJldmVyc2UiLCJmZXRjaEVjaURhdGFCeUluZHVzdHJ5IiwiaW5kdXN0cnkiLCJzZXJpZXNJZCIsImZpbmFuY2UiLCJwcm9mZXNzaW9uYWxTZXJ2aWNlcyIsImVkdWNhdGlvbkFuZEhlYWx0aFNlcnZpY2VzIiwibGVpc3VyZUFuZEhvc3BpdGFsaXR5IiwiZ29vZFByb2R1Y2luZyIsInNlcnZpY2VQcm92aWRpbmciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qc193YWxrdGhyb3VnaC8uL3NyYy9zY3JpcHRzL2RhdGEuanM/ZmJkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1x0VG90YWwgY29tcGVuc2F0aW9uIGZvciBQcml2YXRlIGluZHVzdHJ5IHdvcmtlcnMgaW4gdmFyaW91cyBpbmR1c3RyaWVzIGFuZCBvY2N1cGF0aW9ucywgMy1tb250aCBwZXJjZW50IGNoYW5nZVxyXG5cclxuY2xhc3MgRGF0YSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IodXJsKSB7XHJcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZmV0Y2hSZWd1bGFyRWNpRGF0YShzdGFydFllYXIsIGVuZFllYXIpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYGh0dHBzOi8vYXBpLmJscy5nb3YvcHVibGljQVBJL3YyL3RpbWVzZXJpZXMvZGF0YS9DSVMyMDEwMDAwMDAwMDAwUT9yZWdpc3RyYXRpb25rZXk9N2Y1NDdkZmFmZDJiNDcwY2JkNTA1ZGFhODM4YjkzMDQmY2F0YWxvZz10cnVlJnN0YXJ0eWVhcj0ke3N0YXJ0WWVhcn0mZW5keWVhcj0ke2VuZFllYXJ9YClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5SZXN1bHRzLnNlcmllc1swXS5kYXRhLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBmZXRjaEVjaURhdGFCeUluZHVzdHJ5KGluZHVzdHJ5LCBzdGFydFllYXIsIGVuZFllYXIpIHtcclxuICAgICAgICBjb25zdCBzZXJpZXNJZCA9IHtcclxuICAgICAgICAgICAgZmluYW5jZTogXCJDSVMyMDE1MjBBMDAwMDAwUVwiLCBcclxuICAgICAgICAgICAgcHJvZmVzc2lvbmFsU2VydmljZXM6IFwiQ0lTMjAxNTQwQTAwMDAwMFFcIixcclxuICAgICAgICAgICAgZWR1Y2F0aW9uQW5kSGVhbHRoU2VydmljZXM6IFwiQ0lTMjAxNjAwMDAwMDAwMFFcIixcclxuICAgICAgICAgICAgbGVpc3VyZUFuZEhvc3BpdGFsaXR5OiBcIkNJUzIwMTcwMDAwMDAwMDBRXCIsXHJcbiAgICAgICAgICAgIGdvb2RQcm9kdWNpbmc6IFwiQ0lTMjAxRzAwMDAwMDAwMFFcIixcclxuICAgICAgICAgICAgc2VydmljZVByb3ZpZGluZzogXCJDSVMyMDFTMDAwMDAwMDAwUVwiXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmV0Y2goYGh0dHBzOi8vYXBpLmJscy5nb3YvcHVibGljQVBJL3YyL3RpbWVzZXJpZXMvZGF0YS8ke3Nlcmllc0lkW2luZHVzdHJ5XX0/cmVnaXN0cmF0aW9ua2V5PTdmNTQ3ZGZhZmQyYjQ3MGNiZDUwNWRhYTgzOGI5MzA0JmNhdGFsb2c9dHJ1ZSZzdGFydHllYXI9JHtzdGFydFllYXJ9JmVuZHllYXI9JHtlbmRZZWFyfWApXHJcbiAgICAgICAgICAgIC50aGVuKGFzeW5jIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXMuUmVzdWx0cy5zZXJpZXNbMF0uZGF0YS5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IERhdGE7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxJQUFJLENBQUM7RUFFUEMsV0FBV0EsQ0FBQ0MsR0FBRyxFQUFFO0lBQ2IsSUFBSSxDQUFDQSxHQUFHLEdBQUdBLEdBQUc7RUFDbEI7RUFFQSxNQUFNQyxtQkFBbUJBLENBQUNDLFNBQVMsRUFBRUMsT0FBTyxFQUFFO0lBQzFDLE9BQU9DLEtBQUssQ0FBRSw4SUFBNklGLFNBQVUsWUFBV0MsT0FBUSxFQUFDLENBQUMsQ0FDckxFLElBQUksQ0FBQyxVQUFTQyxRQUFRLEVBQUU7TUFDckIsT0FBT0EsUUFBUSxDQUFDQyxJQUFJLEVBQUU7SUFDMUIsQ0FBQyxDQUFDLENBQ0RGLElBQUksQ0FBRUcsR0FBRyxJQUFLO01BQ1g7TUFDQSxPQUFPQSxHQUFHLENBQUNDLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDQyxJQUFJLENBQUNDLE9BQU8sRUFBRTtJQUMvQyxDQUFDLENBQUM7RUFDVjtFQUVBLE1BQU1DLHNCQUFzQkEsQ0FBQ0MsUUFBUSxFQUFFWixTQUFTLEVBQUVDLE9BQU8sRUFBRTtJQUN2RCxNQUFNWSxRQUFRLEdBQUc7TUFDYkMsT0FBTyxFQUFFLG1CQUFtQjtNQUM1QkMsb0JBQW9CLEVBQUUsbUJBQW1CO01BQ3pDQywwQkFBMEIsRUFBRSxtQkFBbUI7TUFDL0NDLHFCQUFxQixFQUFFLG1CQUFtQjtNQUMxQ0MsYUFBYSxFQUFFLG1CQUFtQjtNQUNsQ0MsZ0JBQWdCLEVBQUU7SUFDdEIsQ0FBQztJQUVELE9BQU9qQixLQUFLLENBQUUsb0RBQW1EVyxRQUFRLENBQUNELFFBQVEsQ0FBRSw0RUFBMkVaLFNBQVUsWUFBV0MsT0FBUSxFQUFDLENBQUMsQ0FDekxFLElBQUksQ0FBQyxnQkFBZUMsUUFBUSxFQUFFO01BQzNCLE9BQU9BLFFBQVEsQ0FBQ0MsSUFBSSxFQUFFO0lBQzFCLENBQUMsQ0FBQyxDQUNERixJQUFJLENBQUVHLEdBQUcsSUFBSztNQUNYLE9BQU9BLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUNDLElBQUksQ0FBQ0MsT0FBTyxFQUFFO0lBQy9DLENBQUMsQ0FBQztFQUNWO0FBQ0o7QUFHQVUsTUFBTSxDQUFDQyxPQUFPLEdBQUd6QixJQUFJIn0=\n//# sourceURL=webpack-internal:///./src/scripts/data.js\n");

/***/ }),

/***/ "./src/index.css":
/*!***********************!*\
  !*** ./src/index.css ***!
  \***********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL2pzX3dhbGt0aHJvdWdoLy4vc3JjL2luZGV4LmNzcz84MDZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.css\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.css");
/******/ 	
/******/ })()
;